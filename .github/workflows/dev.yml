name: terraform-dev

on:
  pull_request:
    paths:
      - 'dev/**/*'
      - '.github/workflows/dev.yml'
  push:
    branches: [ main ]
    paths:
      - 'dev/**/*'
      - '.github/workflows/dev.yml'
  workflow_dispatch: {}

env:
  TF_WORKING_DIR: "./dev"

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write
  actions: write   # required to manage Actions variables
  contents: read

jobs:
  apply:
    if: ${{ vars.DESTROY_TF_DEV == 'false' }} # env vars are evaluated BEFORE the job. Repo vars are used here.
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4

      #- name: Show OIDC claims
      #  uses: actions/github-script@v7
      #  with:
      #    script: |
      #      const idt = await core.getIDToken('sts.amazonaws.com');
      #      const claims = JSON.parse(Buffer.from(idt.split('.')[1], 'base64').toString());
      #      console.log('aud:', claims.aud);
      #      console.log('sub:', claims.sub);

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEP_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      - name: Detect runner egress IP
        run: echo "TF_VAR_github_actions_egress_cidr=$(curl -s https://checkip.amazonaws.com)/32" >> $GITHUB_ENV

      - name: Init
        run: terraform init -input=false

      - name: Fmt
        run: terraform fmt -recursive -check

      - name: Validate
        run: terraform validate

      ###### PLAN
      - name: Check EKS cluster
        id: eks_status
        shell: bash
        run: |
          set -euo pipefail
          if aws eks describe-cluster --name dev-dp-001-cluster --region us-east-1 > /dev/null 2>&1; then
            echo "status=DEPLOYED" >> "$GITHUB_OUTPUT"
          fi

      - name: Make EKS cluster public
        if: steps.eks_status.outputs.status == 'DEPLOYED'
        run: terraform apply -input=false -auto-approve -target=module.eks.aws_eks_cluster.this[0] -target=aws_security_group_rule.github_access -var enable_public_api=true
      
      - name: Plan
        id: plan
        run: terraform plan -input=false -out=tfplan -var enable_public_api=true

      - name: Plan full output
        run: terraform show -no-color tfplan > tfplan.txt

      - name: Plan catch errors
        if: ${{ failure() && steps.plan.outcome == 'failure' }}
        run: |
          set -o pipefail
          terraform plan -no-color -input=false -var enable_public_api=true 2>&1 | tee tfplan.txt

      - name: Upload plan full output artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}/tfplan.txt

      ###### APPLY
      - name: Apply (with public eks)
        if: ${{ vars.APPLY_TF_DEV == 'true' }}
        run: terraform apply -input=false -auto-approve tfplan

      - name: Deploy Apps
        if: ${{ vars.APPLY_TF_DEV == 'true' }}
        run: terraform apply -input=false -auto-approve -target=kubernetes_manifest.argocd_root_app -var enable_public_api=true -var deploy_apps=true

      - name: Apply (just make eks private)
        if: ${{ vars.APPLY_TF_DEV == 'true' }}
        run: terraform apply -input=false -auto-approve -target=module.eks.aws_eks_cluster.this[0] -target=aws_security_group_rule.github_access -var enable_public_api=false -var deploy_apps=true

  destroy:
    if: ${{ vars.DESTROY_TF_DEV == 'true' }} # env vars are evaluated BEFORE the job. Repo vars are used here.
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEP_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      - name: Init
        run: terraform init -input=false

      - name: Check EKS cluster
        id: eks_status
        shell: bash
        run: |
          set -euo pipefail
          if aws eks describe-cluster --name dev-dp-001-cluster --region us-east-1 > /dev/null 2>&1; then
            echo "status=DEPLOYED" >> "$GITHUB_OUTPUT"
          fi

      - name: Make EKS cluster public
        if: steps.eks_status.outputs.status == 'DEPLOYED'
        run: terraform apply -input=false -auto-approve -target=module.eks.aws_eks_cluster.this[0] -var "github_actions_egress_cidr=$(curl -s https://checkip.amazonaws.com)/32" -var enable_public_api=true

      - name: Remove ArgoCD finalizer
        if: steps.eks_status.outputs.status == 'DEPLOYED'
        run: |
          aws eks update-kubeconfig --name dev-dp-001-cluster --region us-east-1
          kubectl -n argocd patch application root-app-dev -p '{"metadata":{"finalizers":[]}}' --type=merge || true

      - name: Purge ALB Controller resources (ALB+TG+SG)
        shell: bash
        run: |
          set -Eeuo pipefail

          aws elbv2 describe-load-balancers --region us-east-1 --output json | jq -r '.LoadBalancers[] | select(.LoadBalancerName | startswith("k8s-")) | .LoadBalancerArn' \
          | while read -r arn; do
              [[ -z "$arn" ]] && continue
              aws elbv2 delete-load-balancer --region us-east-1 --load-balancer-arn "$arn" || true
            done

          # Give AWS a moment to release attached ENIs/SG refs
          sleep 15

          aws elbv2 describe-target-groups --region us-east-1 --output json | jq -r '.TargetGroups[] | select(.TargetGroupName | startswith("k8s-")) | .TargetGroupArn' \
          | while read -r arn; do
              [[ -z "$arn" ]] && continue
              aws elbv2 delete-target-group --region us-east-1 --target-group-arn "$arn" || true
            done

          aws ec2 describe-security-groups --region us-east-1 --output json | jq -r '.SecurityGroups[] | select(.GroupName | startswith("k8s-")) | .GroupId' \
          | while read -r sg; do
              [[ -z "$sg" ]] && continue
              aws ec2 delete-security-group --region us-east-1 --group-id "$sg" || true
            done

      - name: Destroy Infrastructure
        run: terraform destroy -input=false -auto-approve